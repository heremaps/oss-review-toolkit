trigger: none # Do not build branches on push.

pr:
- master

schedules:
- cron: "0 2 * * *"
  displayName: Nightly build
  branches:
    include:
    - master
  always: true # Also build if there were no code changes, because many of our tests rely on external infrastructure.

variables:
  GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle
  # Tool versions.
  BOWER_VERSION: '1.8.8'
  BUNDLER_VERSION: '2.1.4'
  COMPOSER_VERSION: '5.1.0' # The version refers to the installer, not to Composer.
  CONAN_VERSION: '1.18.0'
  FLUTTER_VERSION: 'v1.12.13+hotfix.9-stable'
  GO_DEP_VERSION: '0.5.4'
  PYTHON_PIPENV_VERSION: '2018.11.26'
  RUST_VERSION: '1.35.0'
  STACK_VERSION: '2.1.3.20190715'
  VIRTUALENV_VERSION: '20.0.14'

stages:
- stage: build_test
  displayName: Build and Test
  jobs:
  # TODO: Consider running the Docker job only if the Dockerfile was changed.
  - job: 'Docker'
    pool:
      vmImage: 'ubuntu-18.04'
    # TODO: Add caching.
    steps:
    - task: Docker@2
      inputs:
        command: 'build'
        Dockerfile: 'Dockerfile'
        tags: |
          ort

  # TODO: Add a separate job to run detekt to prevent running the matrix build if there are detekt errors?
  #       Downside is that this requires separate cloning. Alternative is to run detekt only on one OS, or to run detekt
  #       in a separate parallel job for early feedback, and disable detekt in the other jobs.
  - job: 'Gradle'
    strategy:
      matrix:
        Linux:
          imageName: 'ubuntu-18.04'
          gradleWrapper: 'gradlew'
          FLUTTER_HOME: '/opt/flutter'
        # TODO: Add a mac build.
        Windows:
          imageName: 'windows-2019'
          gradleWrapper: 'gradlew.bat'
          FLUTTER_HOME: 'C:\flutter'
    pool:
      vmImage: $(imageName)
    steps:
    - task: UsePythonVersion@0
      displayName: Enable Python 3.6
      inputs:
        versionSpec: '3.6'
        addToPath: true
        architecture: 'x64'

    # Linux requirements.
    - bash: |
        # Install apt packages.
        sudo apt-get -qq install cvs

        # Uninstall mono-devel because it contains the "lc" command which conflicts with BoyterLc.
        sudo apt-get -qq remove mono-devel

        # Install NPM packages.
        sudo npm install -g bower@$BOWER_VERSION

        # Install Python packages.
        export PATH=$PATH:~/.local/bin
        pip install --user \
          conan==$CONAN_VERSION \
          pipenv==$PYTHON_PIPENV_VERSION \
          reuse \
          virtualenv==$VIRTUALENV_VERSION
        conan user # Create the conan data directory. Automatic detection of your arch, compiler, etc.

        # Install Ruby packages.
        sudo gem install bundler -v $BUNDLER_VERSION

        # Downgrade Rust, because the CargoSubcrateTest fails with the pre-installed version.
        rustup default $RUST_VERSION

        # Install Flutter.
        curl -Os https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_$FLUTTER_VERSION.tar.xz
        tar xf flutter_linux_$FLUTTER_VERSION.tar.xz -C $(dirname $FLUTTER_HOME)
        rm flutter_linux_$FLUTTER_VERSION.tar.xz
        export PATH="$PATH:$FLUTTER_HOME/bin:$FLUTTER_HOME/bin/cache/dart-sdk/bin"
        flutter config --no-analytics
        flutter doctor

        # Install git-repo.
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.local/bin/repo
        chmod a+x ~/.local/bin/repo

        # Install Go Dep.
        mkdir -p ~/go/bin
        export PATH=$PATH:~/go/bin
        curl https://raw.githubusercontent.com/golang/dep/v$GO_DEP_VERSION/install.sh | sh

        # Update PATH for next steps, see:
        # https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/logging-commands?view=azure-devops&tabs=bash#prependpath-prepend-a-path-to-the--path-environment-variable
        echo "##vso[task.setvariable variable=path;]$PATH"
      condition: eq( variables['Agent.OS'], 'Linux' )
      displayName: Install Linux requirements

    # TODO: Add a step to run "reuse lint" (only on Linux?).

    # Windows requirements.
    - pwsh: |
        # Install Chocolatey packages.
        cinst dep --version $env:GO_DEP_VERSION -y --no-progress
        cinst haskell-stack --version $env:STACK_VERSION -y --no-progress
        refreshenv

        # Install CVS. Disabled because msys2 installation takes too long.
        #cinst msys2 --params "/InstallDir=C:/msys64" --no-progress
        #C:\msys64\usr\bin\bash -lc "pacman --noconfirm -Sy cvs"
        #$env:PATH += ";C:\msys64\usr\bin"

        # Install NPM packages.
        npm install -g bower@$env:BOWER_VERSION

        # Install Python packages.
        pip install --user conan==$env:CONAN_VERSION pipenv==$env:PYTHON_PIPENV_VERSION reuse virtualenv==$env:VIRTUALENV_VERSION
        conan user # Create the conan data directory. Automatic detection of your arch, compiler, etc.

        # Install Ruby packages.
        gem install bundler -v $env:BUNDLER_VERSION

        # Install Flutter.
        Invoke-WebRequest -Uri "https://storage.googleapis.com/flutter_infra/releases/stable/windows/flutter_windows_$env:FLUTTER_VERSION.zip" -OutFile "C:\flutter_windows_$env:FLUTTER_VERSION.zip"
        7z x C:\flutter_windows_$env:FLUTTER_VERSION.zip -oC:\
        Remove-Item "C:\flutter_windows_$env:FLUTTER_VERSION.zip"
        $env:PATH += ";$env:FLUTTER_HOME\bin;$env:FLUTTER_HOME\bin\cache\dart-sdk\bin"
        flutter config --no-analytics
        flutter doctor

        # Stop adb because it otherwise locks the working directory which fails the checkout step.
        Stop-Process -Name "adb"

        ## Install git-repo.
        Invoke-WebRequest -Uri "https://storage.googleapis.com/git-repo-downloads/repo" -OutFile "$env:PROGRAMFILES\Git\usr\bin\repo"

        # Update PATH for next steps, see:
        # https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/logging-commands?view=azure-devops&tabs=powershell#prependpath-prepend-a-path-to-the--path-environment-variable
        echo "##vso[task.setvariable variable=path;]$env:PATH"
      condition: eq( variables['Agent.OS'], 'Windows_NT' )
      displayName: Install Windows requirements
      errorActionPreference: continue
      failOnStderr: false

    # Clone repository.
    - checkout: self
      fetchDepth: 1
      submodules: recursive

    # Gradle build cache, see: https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops
    - task: Cache@2
      inputs:
        key: '"$(Agent.OS)" | gradle-caches | gradle.properties, settings.gradle, **/build.gradle.kts'
        restoreKeys: |
          "$(Agent.OS)" | gradle-caches
        path: $(GRADLE_USER_HOME)/caches
      displayName: Cache Gradle Caches

    - task: Cache@2
      inputs:
        key: '"$(Agent.OS)" | gradle-wrapper | gradle/wrapper/gradle-wrapper.properties'
        restoreKeys: |
          "$(Agent.OS)" | gradle-wrapper
        path: $(GRADLE_USER_HOME)/wrapper/dists
      displayName: Cache Gradle Wrapper

    # Check requirements.
    # Enable this task to check installed requirements, e.g. after upgrading the required version of a system
    # dependency.
    - task: Gradle@2
      displayName: Check requirements
      continueOnError: true
      enabled: false # TODO: Make this a Pipeline parameter to be able to activate it in the UI.
      inputs:
        gradleWrapperFile: $(gradleWrapper)
        options: --console=plain --no-daemon -x reporter-web-app:yarnBuild
        tasks: 'cli:run --args="requirements"'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        gradleOptions: '-Xmx4096m'

    # Build and test.
    - task: Gradle@2
      displayName: Build and Test with Gradle
      inputs:
        gradleWrapperFile: $(gradleWrapper)
        # TODO: Only exclude ExpensiveTag on PR builds.
        options: --console=plain --no-daemon --stacktrace -Dkotest.tags.exclude=ExpensiveTag -Dkotest.assertions.multi-line-diff=simple
        tasks: 'test funTest jacocoReport'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        testRunTitle: $(imageName)
        # TODO: Configure code coverage options.
        #codeCoverageToolOption: 'JaCoCo'
        #codeCoverageClassFilter: '' # TODO: Define filters if required, e.g. '+:com.,+:org.,-:my.app*.*.'.
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        gradleOptions: '-Xmx8192m'

    # Ensure that any running Gradle daemon is stopped.
    - bash: ./gradlew --stop
      displayName: Stop Gradle Daemon

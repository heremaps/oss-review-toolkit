/*
 * Copyright (C) 2019 Bosch Software Innovations GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package com.here.ort.reporter.reporters

import com.here.ort.model.OrtResult
import com.here.ort.model.yamlMapper
import com.here.ort.utils.test.patchExpectedResult
import com.here.ort.utils.test.readOrtResult

import io.kotlintest.matchers.beEmpty
import io.kotlintest.should
import io.kotlintest.shouldBe
import io.kotlintest.specs.WordSpec

import java.io.ByteArrayOutputStream
import java.io.File

import org.cyclonedx.BomParser

class CycloneDxReporterTest : WordSpec({
    "A generated BOM" should {
        "be valid" {
            val bomParser = BomParser()
            val bomFile = createTempFile().also {
                CycloneDxReporter().generateReport(
                    it.outputStream(),
                    readOrtResult("src/funTest/assets/NPM-is-windows-1.0.2-scan-result.json")
                )

                it.deleteOnExit()
            }

            bomParser.validate(bomFile) should beEmpty()
        }

        "match the result from the official Gradle plugin" {
            val ortResultFile = File("src/funTest/assets/gradle-all-dependencies-result.yml")
            val bomBytesFromReporter = ByteArrayOutputStream().also { outputStream ->
                CycloneDxReporter().generateReport(
                    outputStream,
                    yamlMapper.readValue(
                        patchExpectedResult(
                            ortResultFile,
                            url = "https://github.com/heremaps/oss-review-toolkit.git",
                            urlProcessed = "https://github.com/heremaps/oss-review-toolkit.git",
                            revision = "9fded2ad79d07ab5cda44f2549301669ea10442a"
                        ),
                        OrtResult::class.java
                    )
                )
            }.toByteArray()
            val bomFromReporter = BomParser().parse(bomBytesFromReporter).apply { components.sortBy { it.name } }

            // The file generated by the official Gradle plugin was modified in the following aspect to be comparable:
            // - all hashes except SHA-1 were removed (because the ORT analyzer does not calculate missing hashes)
            // - all qualifiers from the purl were removed (because the ORT analyzer does not currently handle package
            //   manager specific qualifiers)
            val bomFileFromPlugin = File("src/funTest/assets/gradle-all-dependencies-expected-cyclonedx-bom.xml")
            val bomFromPlugin = BomParser().parse(bomFileFromPlugin).apply { components.sortBy { it.name } }

            // TODO: Remove this once the official Gradle plugin supports getting a component's licenses, see
            //       https://github.com/CycloneDX/cyclonedx-gradle-plugin/issues/16.
            bomFromReporter.components.forEach { it.licenseChoice = null }

            // TODO: Remove this once the official Gradle plugin can get all descriptions.
            val componentIteratorForReporter = bomFromReporter.components.iterator()
            val componentIteratorForPlugin = bomFromPlugin.components.iterator()
            while (componentIteratorForReporter.hasNext() && componentIteratorForPlugin.hasNext()) {
                val componentFromReporter = componentIteratorForReporter.next()
                val componentFromPlugin = componentIteratorForPlugin.next()
                if (componentFromPlugin.description == null) {
                    // The official Gradle plugin does not seem to be able to get all descriptions that the ORT analyzer
                    // gets, so clear out ORT's one if the plugin has none, but still compare them if both are present.
                    componentFromReporter.description = null
                }
            }

            // Clear out the unique serial numbers for comparison.
            bomFromReporter.serialNumber = null
            bomFromPlugin.serialNumber = null

            yamlMapper.writeValueAsString(bomFromReporter) shouldBe yamlMapper.writeValueAsString(bomFromPlugin)
        }
    }
})

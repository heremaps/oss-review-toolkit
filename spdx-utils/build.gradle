plugins {
    id 'antlr'
}

// Apply core plugins.
apply plugin: 'java-library'

generateGrammarSource {
    arguments += '-visitor'
}

compileKotlin.dependsOn(generateGrammarSource)

idea.project.settings {
    taskTriggers {
        afterSync tasks.getByName('generateGrammarSource')
    }
}

dependencies {
    antlr "org.antlr:antlr4:$antlrVersion"

    api "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"

    implementation "commons-codec:commons-codec:$commonsCodecVersion"

    testImplementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
}

def getLicenseHeader(fromYear = 2017, toYear = java.time.Year.now().value) {
    """\
        /*
         * Copyright (C) $fromYear-$toYear HERE Europe B.V.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *     http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         *
         * SPDX-License-Identifier: Apache-2.0
         * License-Filename: LICENSE
         */

     """.stripIndent()
}

def licenseToEnumEntry(String license) {
    def enumName = license.toUpperCase().replaceAll('[-\\.]', '_').replace('+', 'PLUS')
    if (enumName[0].isNumber()) {
        enumName = "_$enumName"
    }
    return "$enumName(\"$license\")"
}

task generateSpdxLicenseList {
    doLast {
        println 'Fetching SPDX license list...'

        def jsonSlurper = new groovy.json.JsonSlurper()
        def spdxUrl = 'https://raw.githubusercontent.com/spdx/license-list-data/master/json/licenses.json'.toURL()
        def json = jsonSlurper.parse(spdxUrl)
        def spdxLicenseIds = json.licenses.collect {
            it['licenseId']
        }

        println "Found ${spdxLicenseIds.size()} SPDX license identifiers."

        def licenseEnumFile = file('src/main/kotlin/SpdxLicense.kt')
        licenseEnumFile.write(getLicenseHeader())
        licenseEnumFile.append("""\
            package com.here.ort.spdx

            /**
             * An enum containing all SPDX license IDs. This class is generated by the Gradle task
             * '$name'.
             */
            enum class SpdxLicense(val id: String) {
            """.stripIndent())

        def enumValues = spdxLicenseIds.collect { "    ${licenseToEnumEntry(it.toString())}" }.sort().join(',\n') + ';'
        licenseEnumFile.append(enumValues)
        licenseEnumFile.append('''

                companion object {
                    /**
                     * Return the enum value for the given [id], or null if it is no SPDX license id.
                     */
                    fun forId(id: String) = SpdxLicense.values().find { it.id == id }
                }

                /**
                 * The full license text as a string.
                 */
                val text by lazy { javaClass.getResource("/licenses/$id").readText() }
            }
            '''.stripIndent())

        println 'Fetching SPDX license texts...'
        def count = 0

        spdxLicenseIds.each { id ->
            def licenseTextResourceFile = file("src/main/resources/licenses/$id")

            // Prefer the license texts from ScanCode as these have better formatting than those from SPDX.
            def urls = [
                    "https://raw.githubusercontent.com/nexB/scancode-toolkit/develop/src/licensedcode/data/licenses/${id.toLowerCase()}.LICENSE",
                    "https://raw.githubusercontent.com/spdx/license-list-data/master/text/${id}.txt",
                    "https://raw.githubusercontent.com/spdx/license-list-data/master/text/deprecated_${id}.txt"
            ]

            def i = urls.iterator()
            while (true) {
                if (i.hasNext()) {
                    def url = i.next()

                    try {
                        def text = url.toURL().text
                        if (!text.endsWith('\n')) text += '\n'
                        licenseTextResourceFile.write(text)
                    } catch (FileNotFoundException e) {
                        continue
                    }

                    println "Fetched licence text ${++count} of ${spdxLicenseIds.size()} for id '$id' from $url."
                    break
                } else {
                    throw new GradleException("Failed to fetch licence text for id '$id' from any of $urls.")
                }
            }
        }

        println "Generated SPDX license enum '$licenseEnumFile'."
    }
}

task generateSpdxLicenseExceptionList {
    doLast {
        println 'Fetching SPDX license exception list...'

        def jsonSlurper = new groovy.json.JsonSlurper()
        def spdxUrl = 'https://raw.githubusercontent.com/spdx/license-list-data/master/json/exceptions.json'.toURL()
        def json = jsonSlurper.parse(spdxUrl)
        def spdxLicenseExceptionIds = json.exceptions.collect {
            it['licenseExceptionId']
        }

        println "Found ${spdxLicenseExceptionIds.size()} SPDX license exception identifiers."

        def licenseExceptionEnumFile = file('src/main/kotlin/SpdxLicenseException.kt')
        licenseExceptionEnumFile.write(getLicenseHeader())
        licenseExceptionEnumFile.append("""\
            package com.here.ort.spdx

            /**
             * An enum containing all SPDX license exception IDs. This class is generated by the Gradle task
             * '$name'.
             */
            enum class SpdxLicenseException(val id: String) {
            """.stripIndent())

        def enumValues = spdxLicenseExceptionIds.collect { "    ${licenseToEnumEntry(it.toString())}" }.sort().join(',\n') + ';'
        licenseExceptionEnumFile.append(enumValues)
        licenseExceptionEnumFile.append('''

                companion object {
                    /**
                     * Return the enum value for the given [id], or null if it is no SPDX license exception id.
                     */
                    fun forId(id: String) = SpdxLicenseException.values().find { it.id == id }
                }

                /**
                 * The full license exception text as a string.
                 */
                val text by lazy { javaClass.getResource("/exceptions/$id").readText() }
            }
            '''.stripIndent())

        println 'Fetching SPDX license exception texts...'
        def count = 0

        spdxLicenseExceptionIds.each { id ->
            def exceptionTextResourceFile = file("src/main/resources/exceptions/$id")

            // Prefer the license texts from ScanCode as these have better formatting than those from SPDX.
            def urls = [
                    "https://raw.githubusercontent.com/nexB/scancode-toolkit/develop/src/licensedcode/data/licenses/${id.toLowerCase()}.LICENSE",
                    "https://raw.githubusercontent.com/spdx/license-list-data/master/text/${id}.txt",
                    "https://raw.githubusercontent.com/spdx/license-list-data/master/text/deprecated_${id}.txt"
            ]

            def i = urls.iterator()
            while (true) {
                if (i.hasNext()) {
                    def url = i.next()

                    try {
                        def text = url.toURL().text
                        if (!text.endsWith('\n')) text += '\n'
                        exceptionTextResourceFile.write(text)
                    } catch (FileNotFoundException e) {
                        continue
                    }

                    println "Fetched licence exception text ${++count} of ${spdxLicenseExceptionIds.size()} for id '$id' from $url."
                    break
                } else {
                    throw new GradleException("Failed to fetch licence exception text for id '$id' from any of $urls.")
                }
            }
        }

        println "Generated SPDX license exception enum '$licenseExceptionEnumFile'."
    }
}

task generateSpdxEnums(dependsOn: [generateSpdxLicenseList, generateSpdxLicenseExceptionList])

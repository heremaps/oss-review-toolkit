jobs:
- job: 'LinuxAnalyzerTest'
  pool:
    vmImage: 'ubuntu-18.04'
  variables:
    FLUTTER_HOME: '/opt/flutter'
  steps:
  - task: UsePythonVersion@0
    displayName: Enable Python 3.6
    inputs:
      versionSpec: '3.6'
      addToPath: true
      architecture: 'x64'

  # Install required tools.
  - bash: |
      # Install apt packages.
      sudo apt-get -qq install cvs

      # Uninstall mono-devel because it contains the "lc" command which conflicts with BoyterLc.
      sudo apt-get -qq remove mono-devel

      # Install NPM packages.
      sudo npm install -g bower@$BOWER_VERSION

      # Install Python packages.
      export PATH=$PATH:~/.local/bin
      pip install --user \
        conan==$CONAN_VERSION \
        pipenv==$PYTHON_PIPENV_VERSION \
        virtualenv==$VIRTUALENV_VERSION
      conan user # Create the conan data directory. Automatic detection of your arch, compiler, etc.

      # Install Ruby packages.
      sudo gem install bundler -v $BUNDLER_VERSION

      # Downgrade Rust, because the CargoSubcrateTest fails with the pre-installed version.
      rustup default $RUST_VERSION

      # Install Flutter.
      curl -Os https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_$FLUTTER_VERSION.tar.xz
      tar xf flutter_linux_$FLUTTER_VERSION.tar.xz -C $(dirname $FLUTTER_HOME)
      rm flutter_linux_$FLUTTER_VERSION.tar.xz
      export PATH="$PATH:$FLUTTER_HOME/bin:$FLUTTER_HOME/bin/cache/dart-sdk/bin"
      flutter config --no-analytics
      flutter doctor

      # Install git-repo.
      curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.local/bin/repo
      chmod a+x ~/.local/bin/repo

      # Install Go Dep.
      mkdir -p ~/go/bin
      export PATH=$PATH:~/go/bin
      curl https://raw.githubusercontent.com/golang/dep/v$GO_DEP_VERSION/install.sh | sh

      # Update PATH for next steps, see:
      # https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/logging-commands?view=azure-devops&tabs=bash#prependpath-prepend-a-path-to-the--path-environment-variable
      echo "##vso[task.setvariable variable=path;]$PATH"
    displayName: Install Required Tools

  # Clone repository.
  - checkout: self
    fetchDepth: 1
    submodules: recursive

  # Gradle build cache, see: https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops
  - task: Cache@2
    inputs:
      key: '"$(Agent.OS)" | analyzer-test | gradle-caches | gradle.properties, settings.gradle, **/build.gradle.kts'
      restoreKeys: |
        "$(Agent.OS)" | analyzer-test | gradle-caches
      path: $(GRADLE_USER_HOME)/caches
    displayName: Cache Gradle Caches

  - task: Cache@2
    inputs:
      key: '"$(Agent.OS)" | gradle-wrapper | gradle/wrapper/gradle-wrapper.properties'
      restoreKeys: |
        "$(Agent.OS)" | gradle-wrapper
      path: $(GRADLE_USER_HOME)/wrapper/dists
    displayName: Cache Gradle Wrapper

  # Check requirements.
  # Enable this task to check installed requirements, e.g. after upgrading the required version of a system
  # dependency.
  - task: Gradle@2
    displayName: Check requirements
    continueOnError: true
    enabled: false # TODO: Make this a Pipeline parameter to be able to activate it in the UI.
    inputs:
      gradleWrapperFile: gradlew
      options: --console=plain --no-daemon -x reporter-web-app:yarnBuild
      tasks: 'cli:run --args="requirements"'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.11'
      gradleOptions: '-Xmx4096m'

  # Build and test.
  - task: Gradle@2
    displayName: Run Tests
    inputs:
      gradleWrapperFile: gradlew
      # TODO: Only exclude ExpensiveTag on PR builds.
      options: --console=plain --no-daemon --stacktrace -Dkotest.tags.exclude=ExpensiveTag -Dkotest.assertions.multi-line-diff=simple
      tasks: 'analyzer:test analyzer:funTest jacocoReport'
      publishJUnitResults: true
      testResultsFiles: '**/TEST-*.xml'
      testRunTitle: $(Agent.JobName)
      # TODO: Configure code coverage options.
      #codeCoverageToolOption: 'JaCoCo'
      #codeCoverageClassFilter: '' # TODO: Define filters if required, e.g. '+:com.,+:org.,-:my.app*.*.'.
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.11'
      gradleOptions: '-Xmx8192m'

  # Clean disk space before caching starts, otherwise the disk might run full.
  - bash: ./gradlew --no-daemon clean
    displayName: Gradle Clean

  # Ensure that any running Gradle daemon is stopped before caching starts.
  - bash: ./gradlew --stop
    displayName: Stop Gradle Daemon

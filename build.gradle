plugins {
    // We need to hard-code the version here because of
    // https://github.com/gradle/gradle/issues/1697
    id 'org.jetbrains.kotlin.jvm' version '1.2.40' apply false
    id 'org.jetbrains.dokka' version '0.9.16' apply false

    // Note that the detekt Gradle plugin version does not necessarily
    // match the detekt tool version.
    id 'io.gitlab.arturbosch.detekt' version '1.0.0.RC6-4' apply false

    id 'com.github.ben-manes.versions' version '0.17.0' apply false
}

subprojects {
    buildscript {
        repositories {
            jcenter()
        }
    }

    // Apply third-party plugins.
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'io.gitlab.arturbosch.detekt'
    apply plugin: 'com.github.ben-manes.versions'

    // Apply core plugins.
    apply plugin: 'jacoco'

    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean isNonFinalVersion = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }

                if (isNonFinalVersion) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

    sourceSets {
        funTest {
            kotlin.srcDirs 'src/funTest/kotlin'
        }
    }

    repositories {
        jcenter()
    }

    dependencies {
        compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.2.40'

        testCompile "io.kotlintest:kotlintest:$kotlintestVersion"
        testCompile project(':utils-test')

        funTestCompile sourceSets.main.output
        funTestCompile sourceSets.test.output
        funTestCompile configurations.testCompile
        funTestRuntime configurations.testRuntime

        funTestCompile "io.kotlintest:kotlintest:$kotlintestVersion"
        funTestCompile project(':utils-test')
    }

    // TODO: Remove this once jackson-module-kotlin and kotlintest are updated.
    configurations.all {
        resolutionStrategy {
            force 'org.jetbrains.kotlin:kotlin-reflect:1.2.40'
        }
    }

    compileKotlin {
        kotlinOptions {
            allWarningsAsErrors = true
            jvmTarget = '1.8'
            apiVersion = '1.2'
        }
    }

    compileTestKotlin {
        kotlinOptions {
            allWarningsAsErrors = true
            jvmTarget = '1.8'
            apiVersion = '1.2'
        }
    }

    detekt {
        version = '1.0.0.RC6-4'

        profile('main') {
            config = '../detekt.yml'
        }
    }

    test {
        testLogging {
            events 'started', 'passed', 'skipped', 'failed'
            exceptionFormat 'full'
        }
    }

    task funTest(type: Test) {
        description = 'Runs the functional tests.'
        group = 'Verification'

        classpath = sourceSets.funTest.runtimeClasspath
        testClassesDirs = sourceSets.funTest.output.classesDirs

        systemProperties = [
                includeTags: System.getProperty("includeTags"),
                excludeTags: System.getProperty("excludeTags")
        ]

        testLogging {
            events 'started', 'passed', 'skipped', 'failed'
            exceptionFormat 'full'
        }
    }

    // Enable JaCoCo only if a JacocoReport task is in the graph as JaCoCo
    // is using "append = true" which disables Gradle's build cache.
    gradle.taskGraph.whenReady { graph ->
        def enabled = graph.allTasks.any { it instanceof JacocoReport }
        tasks.withType(Test) {
            jacoco.enabled = enabled
        }
    }

    jacocoTestReport {
        reports {
            // Enable XML in addition to HTML for CI integration.
            xml.enabled true
        }
    }

    task jacocoFunTestReport(type: JacocoReport) {
        description = 'Generates code coverage report for the funTest task.'
        group = 'Reporting'

        executionData funTest
        sourceSets sourceSets.main

        reports {
            // Enable XML in addition to HTML for CI integration.
            xml.enabled true
        }
    }

    task jacocoReport {
        description = 'Generates code coverage reports for all test tasks.'
        group = 'Reporting'

        dependsOn tasks.withType(JacocoReport)
    }

    check.dependsOn detektCheck
    check.dependsOn funTest

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/javadoc"
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task dokkaJar(type: Jar, dependsOn: dokka) {
        classifier = 'dokka'
        from dokka.outputDirectory
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        classifier = 'javadoc'
        from dokkaJavadoc.outputDirectory
    }

    artifacts {
        archives sourcesJar
        archives dokkaJar
        archives javadocJar
    }
}

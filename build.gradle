plugins {
    id 'org.jetbrains.kotlin.jvm' apply false
    id 'org.jetbrains.dokka' apply false

    id 'com.github.ben-manes.versions' apply false
    id 'io.gitlab.arturbosch.detekt' apply false
}

subprojects {
    buildscript {
        repositories {
            jcenter()
        }
    }

    if (it.name == 'reporter-web-app') return

    // Apply third-party plugins.
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'io.gitlab.arturbosch.detekt'
    apply plugin: 'com.github.ben-manes.versions'

    // Apply core plugins.
    apply plugin: 'jacoco'

    kotlin {
        experimental {
            // Required by kotlintest as of
            // https://github.com/kotlintest/kotlintest/pull/332.
            coroutines 'enable'
        }
    }

    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean isNonFinalVersion = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }

                if (isNonFinalVersion) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

    sourceSets {
        funTest {
            kotlin.srcDirs 'src/funTest/kotlin'
        }
    }

    repositories {
        jcenter()
    }

    plugins.withType(JavaLibraryPlugin) {
        dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

            testImplementation "io.kotlintest:kotlintest-core:$kotlintestVersion"
            testImplementation "io.kotlintest:kotlintest-assertions:$kotlintestVersion"
            testImplementation "io.kotlintest:kotlintest-runner-junit5:$kotlintestVersion"
            testImplementation project(':utils-test')

            funTestImplementation sourceSets.main.output
            funTestImplementation sourceSets.test.output
            funTestImplementation configurations.testImplementation
            funTestRuntime configurations.testRuntime
        }
    }

    plugins.withType(ApplicationPlugin) {
        dependencies {
            compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

            testCompile "io.kotlintest:kotlintest-core:$kotlintestVersion"
            testCompile "io.kotlintest:kotlintest-assertions:$kotlintestVersion"
            testCompile "io.kotlintest:kotlintest-runner-junit5:$kotlintestVersion"
            testCompile project(':utils-test')

            funTestCompile sourceSets.main.output
            funTestCompile sourceSets.test.output
            funTestCompile configurations.testCompile
            funTestRuntime configurations.testRuntime
        }
    }

    // TODO: Remove this once jackson-module-kotlin and kotlintest are updated.
    configurations.all {
        resolutionStrategy {
            force "org.jetbrains.kotlin:kotlin-reflect:$kotlinPluginVersion"
        }
    }

    compileKotlin {
        kotlinOptions {
            allWarningsAsErrors = true
            jvmTarget = '1.8'
            apiVersion = '1.2'
        }
    }

    compileTestKotlin {
        kotlinOptions {
            allWarningsAsErrors = true
            jvmTarget = '1.8'
            apiVersion = '1.2'
        }
    }

    detekt {
        // Align the detekt core and plugin versions.
        version = detektPluginVersion

        profile('main') {
            config = '../detekt.yml'
        }
    }

    task funTest(type: Test) {
        description = 'Runs the functional tests.'
        group = 'Verification'

        classpath = sourceSets.funTest.runtimeClasspath
        testClassesDirs = sourceSets.funTest.output.classesDirs
    }

    // Enable JaCoCo only if a JacocoReport task is in the graph as JaCoCo
    // is using "append = true" which disables Gradle's build cache.
    gradle.taskGraph.whenReady { graph ->
        def enabled = graph.allTasks.any { it instanceof JacocoReport }

        tasks.withType(Test) {
            jacoco.enabled = enabled

            systemProperties = [
                    'kotlintest.tags.include': System.getProperty('kotlintest.tags.include'),
                    'kotlintest.tags.exclude': System.getProperty('kotlintest.tags.exclude')
            ]

            testLogging {
                events 'started', 'passed', 'skipped', 'failed'
                exceptionFormat 'full'
            }

            useJUnitPlatform()
        }
    }

    jacocoTestReport {
        reports {
            // Enable XML in addition to HTML for CI integration.
            xml.enabled true
        }
    }

    task jacocoFunTestReport(type: JacocoReport) {
        description = 'Generates code coverage report for the funTest task.'
        group = 'Reporting'

        executionData funTest
        sourceSets sourceSets.main

        reports {
            // Enable XML in addition to HTML for CI integration.
            xml.enabled true
        }
    }

    task jacocoReport {
        description = 'Generates code coverage reports for all test tasks.'
        group = 'Reporting'

        dependsOn tasks.withType(JacocoReport)
    }

    check.dependsOn detektCheck
    check.dependsOn funTest

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/javadoc"
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task dokkaJar(type: Jar, dependsOn: dokka) {
        classifier = 'dokka'
        from dokka.outputDirectory
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        classifier = 'javadoc'
        from dokkaJavadoc.outputDirectory
    }

    artifacts {
        archives sourcesJar
        archives dokkaJar
        archives javadocJar
    }
}

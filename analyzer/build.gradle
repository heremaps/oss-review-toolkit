// Apply core plugins.
apply plugin: 'application'

applicationName = 'analyzer'
mainClassName = 'com.here.ort.analyzer.Main'

sourceSets {
    funTest {
        kotlin.srcDirs 'src/funTest/kotlin'
    }
}

dependencies {
    compile project(':downloader')
    compile project(':model')
    compile project(':util')

    compile "com.beust:jcommander:$jcommanderVersion"
    compile "com.vdurmont:semver4j:$semverVersion"
    compile "org.gradle:gradle-tooling-api:${gradle.gradleVersion}"
    // TODO: clean up dependencies below, likely not all of them are required
    compile 'org.apache.maven:maven-core:3.5.2'
    compile 'org.apache.maven:maven-compat:3.5.2'
    compile 'org.apache.maven:maven-embedder:3.5.2'
    compile 'org.apache.maven.resolver:maven-resolver-api:1.1.0'
    compile 'org.apache.maven.resolver:maven-resolver-connector-basic:1.1.0'
    compile 'org.apache.maven.resolver:maven-resolver-transport-file:1.1.0'
    compile 'org.apache.maven.resolver:maven-resolver-transport-http:1.1.0'

    funTestCompile sourceSets.main.output
    funTestCompile sourceSets.test.output
    funTestCompile configurations.testCompile
    funTestRuntime configurations.testRuntime

    funTestCompile "io.kotlintest:kotlintest:$kotlintestVersion"
}

task funTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'Verification'
    classpath = sourceSets.funTest.runtimeClasspath
    testClassesDirs = sourceSets.funTest.output.classesDirs

    testLogging {
        events 'started', 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
    }
}

task funTestCoverage(type: JacocoReport, dependsOn: funTest) {
    description = 'Generates the code coverage report for the functional tests.'
    group = 'Reporting'

    executionData funTest
    sourceSets sourceSets.main

    reports {
        // Enable XML in addition to HTML for CI integration.
        xml.enabled true
    }
}

check.dependsOn funTest
